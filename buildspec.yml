version: 0.2

env:
  variables:
    TERRAFORM_VERSION: "1.5.5"

phases:
  install:
    commands:
      # A fase de instalação está correta e não precisa de mudanças.
      - |
        echo "Instalando o Terraform ${TERRAFORM_VERSION}..."
        ARCH=$(uname -m | sed -e 's/aarch64/arm64/' -e 's/x86_64/amd64/')
        wget -q "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_${ARCH}.zip"
        unzip terraform_*.zip
        mkdir -p $HOME/bin
        mv terraform $HOME/bin/
        export PATH="$HOME/bin:$PATH"
        echo "Verificando a instalação do Terraform..."
        terraform --version

  pre_build:
    commands:
      # A fase de download do main.tf está correta e não precisa de mudanças.
      - |
        echo "Construindo o caminho do S3 para o arquivo main.tf..."
        TF_CODE_PATH="s3://${AWS_S3_BUCKET_TARGET_NAME_0}/states/${STATE_NAME}/main.tf"
        
        echo "Baixando o arquivo main.tf de: ${TF_CODE_PATH}"
        aws s3 cp "${TF_CODE_PATH}" .
        
        echo "Arquivo main.tf baixado com sucesso."
        echo "--------------------------------------------------"
        echo "ESTRUTURA DE ARQUIVOS ANTES DO AJUSTE (VISUALIZAÇÃO):"
        ls -laR
        echo "--------------------------------------------------"


  build:
    commands:
      # --- VERSÃO FINAL COM VERIFICAÇÕES DE DIRETÓRIO ---
      - |
        echo "Ajustando e VERIFICANDO a estrutura de diretórios para múltiplas fontes..."
        
        # Faz um loop por cada identificador na variável de ambiente
        for IDENTIFIER in $SECONDARY_SOURCE_IDENTIFIERS; do
          SOURCE_PATH_VAR_NAME="CODEBUILD_SRC_DIR_${IDENTIFIER}"
          SOURCE_PATH="${!SOURCE_PATH_VAR_NAME}"
          
          echo "=================================================="
          echo "Processando identificador: ${IDENTIFIER}"
          echo "Caminho de origem esperado: ${SOURCE_PATH}"
          
          # ======================= VERIFICAÇÃO 1: O CLONE EXISTE? =======================
          # Verifica se o CodeBuild realmente clonou o repositório no local esperado.
          # A flag '[ ! -d "..." ]' verifica se o diretório NÃO existe.
          if [ ! -d "${SOURCE_PATH}" ]; then
              echo "ERRO CRÍTICO: O diretório de origem clonado '${SOURCE_PATH}' não foi encontrado!"
              echo "Causas possíveis: O 'sourceIdentifier' (${IDENTIFIER}) está incorreto ou a fonte secundária falhou ao ser clonada."
              exit 1 # Falha o build imediatamente
          fi
          echo "VERIFICAÇÃO SUCESSO: Diretório de origem '${SOURCE_PATH}' encontrado."
          # ==============================================================================

          # Mapeamento de qual identificador corresponde a qual diretório esperado pelo Terraform
          TARGET_NAME=""
          if [ "$IDENTIFIER" == "CloudManProLambdaDeploy" ]; then
              TARGET_NAME="LambdaDeploy"
          elif [ "$IDENTIFIER" == "BuildPrivate" ]; then # Ajustado para o nome provável do seu identificador
              TARGET_NAME="BuildPrivate"
          fi
          
          if [ -n "$TARGET_NAME" ]; then
              echo "Movendo '${SOURCE_PATH}' para o diretório de destino '${TARGET_NAME}'..."
              mv "${SOURCE_PATH}" "${TARGET_NAME}"
              
              # =================== VERIFICAÇÃO 2: A RENOMEAÇÃO FUNCIONOU? ==================
              # Verifica se o novo diretório de destino agora existe.
              if [ ! -d "${TARGET_NAME}" ]; then
                  echo "ERRO CRÍTICO: O diretório de destino '${TARGET_NAME}' não foi encontrado após a tentativa de renomeação."
                  echo "A operação 'mv' pode ter falhado devido a um problema inesperado."
                  exit 1 # Falha o build imediatamente
              fi
              echo "VERIFICAÇÃO SUCESSO: Diretório de destino '${TARGET_NAME}' criado com sucesso."
              # ===============================================================================

          else
              echo "AVISO: Nenhum mapeamento de diretório encontrado para o identificador '${IDENTIFIER}'. Pulando renomeação."
          fi
          echo "=================================================="
        done
        
        echo
        echo "--------------------------------------------------"
        echo "ESTRUTURA DE ARQUIVOS DEPOIS DO AJUSTE (VISUALIZAÇÃO):"
        ls -laR
        echo "--------------------------------------------------"
        echo

        echo "Inicializando o Terraform..."
        terraform init -reconfigure

        echo "Executando o comando Terraform: ${COMMAND}"
        case ${COMMAND} in
          plan)
            terraform plan
            ;;
          apply)
            terraform plan -out=tfplan
            terraform apply -auto-approve tfplan
            ;;
          destroy)
            terraform destroy -auto-approve
            ;;
          *)
            echo "Comando '${COMMAND}' inválido. Use 'plan', 'apply' ou 'destroy'."
            exit 1
            ;;
        esac

  post_build:
    commands:
      - echo "Build para o comando '${COMMAND}' concluído."
