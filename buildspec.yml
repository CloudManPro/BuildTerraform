version: 0.2

env:
  variables:
    TERRAFORM_VERSION: "1.5.5"

phases:
  install:
    commands:
      # A fase de instalação está correta e não precisa de mudanças.
      - |
        echo "Instalando o Terraform ${TERRAFORM_VERSION}..."
        ARCH=$(uname -m | sed -e 's/aarch64/arm64/' -e 's/x86_64/amd64/')
        wget -q "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_${ARCH}.zip"
        unzip terraform_*.zip
        mkdir -p $HOME/bin
        mv terraform $HOME/bin/
        export PATH="$HOME/bin:$PATH"
        echo "Verificando a instalação do Terraform..."
        terraform --version

  pre_build:
    commands:
      # A fase de download do main.tf está correta e não precisa de mudanças.
      - |
        echo "Construindo o caminho do S3 para o arquivo main.tf..."
        TF_CODE_PATH="s3://${AWS_S3_BUCKET_TARGET_NAME_0}/states/${STATE_NAME}/main.tf"
        
        echo "Baixando o arquivo main.tf de: ${TF_CODE_PATH}"
        aws s3 cp "${TF_CODE_PATH}" .
        
        echo "Arquivo main.tf baixado com sucesso."
        echo "--------------------------------------------------"
        echo "ESTRUTURA DE ARQUIVOS ANTES DO AJUSTE (VISUALIZAÇÃO):"
        ls -laR
        echo "--------------------------------------------------"

  build:
    commands:
      # --- VERSÃO FINAL E 100% DINÂMICA BASEADA EM CONVENÇÃO ---
      - |
        echo "Ajustando a estrutura de diretórios dinamicamente..."
        
        # Define o prefixo comum que será removido dos identificadores.
        # Altere este valor se sua convenção de nomenclatura mudar.
        PREFIX_TO_REMOVE="CloudManPro"

        # Faz um loop por cada identificador na variável de ambiente.
        # O shell irá dividir a string por espaços automaticamente.
        for IDENTIFIER in $SECONDARY_SOURCE_IDENTIFIERS; do
          
          # Constrói o nome da variável que contém o caminho de origem
          SOURCE_PATH_VAR_NAME="CODEBUILD_SRC_DIR_${IDENTIFIER}"
          # Usa expansão indireta para obter o caminho real
          SOURCE_PATH="${!SOURCE_PATH_VAR_NAME}"
          
          # Usa a expansão de parâmetro do shell para remover o prefixo do identificador,
          # criando assim o nome do diretório de destino dinamicamente.
          # Ex: "CloudManProLambdaDeploy" se torna "LambdaDeploy"
          TARGET_NAME="${IDENTIFIER#$PREFIX_TO_REMOVE}"
          
          echo "=================================================="
          echo "Processando Identificador: ${IDENTIFIER}"
          echo "  -> Caminho de Origem: ${SOURCE_PATH}"
          echo "  -> Nome de Destino Calculado: ${TARGET_NAME}"
          
          if [ -d "${SOURCE_PATH}" ]; then
            echo "  -> Movendo '${SOURCE_PATH}' para '${TARGET_NAME}'..."
            mv "${SOURCE_PATH}" "${TARGET_NAME}"
          else
            echo "  -> AVISO: Diretório de origem '${SOURCE_PATH}' não encontrado. Pulando."
          fi
          echo "=================================================="
        done
        
        echo
        echo "--------------------------------------------------"
        echo "ESTRUTURA DE ARQUIVOS DEPOIS DO AJUSTE (VISUALIZAÇÃO):"
        ls -laR
        echo "--------------------------------------------------"
        echo

        echo "Inicializando o Terraform..."
        terraform init -reconfigure

        echo "Executando o comando Terraform: ${COMMAND}"
        case ${COMMAND} in
          plan)
            terraform plan
            ;;
          apply)
            terraform plan -out=tfplan
            terraform apply -auto-approve tfplan
            ;;
          destroy)
            terraform destroy -auto-approve
            ;;
          *)
            echo "Comando '${COMMAND}' inválido. Use 'plan', 'apply' ou 'destroy'."
            exit 1
            ;;
        esac

  post_build:
    commands:
      - echo "Build para o comando '${COMMAND}' concluído."
