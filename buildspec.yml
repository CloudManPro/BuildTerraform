version: 0.2

env:
  # O 'parameter-store' ou 'secrets-manager' pode ser usado para buscar segredos, 
  # mas para variáveis de texto simples, a seção 'variables' é suficiente.
  variables:
    TERRAFORM_VERSION: "1.5.5"
    # TF_COMMAND é injetado dinamicamente pela chamada da Lambda
    # AWS_S3_BUCKET_TARGET_NAME_0 é injetado dinamicamente
    # STATE_NAME é injetado dinamicamente

phases:
  install:
    commands:
      # Sua fase de instalação está ótima.
      - |
        echo "Instalando o Terraform ${TERRAFORM_VERSION}..."
        ARCH=$(uname -m | sed -e 's/aarch64/arm64/' -e 's/x86_64/amd64/')
        wget -q "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_${ARCH}.zip"
        unzip -o terraform_*.zip -d /usr/local/bin/
        echo "Verificando a instalação do Terraform..."
        terraform --version

  pre_build:
    commands:
      # --- ESTA É A VERSÃO DINÂMICA DA SOLUÇÃO ---
      - |
        echo "Construindo o caminho do S3 para o arquivo main.tf..."
        TF_CODE_PATH="s3://${AWS_S3_BUCKET_TARGET_NAME_0}/states/${STATE_NAME}/main.tf"
        
        echo "Baixando o arquivo main.tf de: ${TF_CODE_PATH}"
        aws s3 cp "${TF_CODE_PATH}" .
        
        echo "Arquivo main.tf baixado com sucesso."
        echo "Listando arquivos no diretório atual para confirmação:"
        ls -la
        # O diretório atual agora contém o main.tf e os diretórios clonados do GitHub.

  build:
    commands:
      - |
        echo "Inicializando o Terraform..."
        # O init agora vai encontrar o main.tf no diretório atual
        terraform init -reconfigure

        # Usando a variável de ambiente 'COMMAND' que você definiu
        echo "Executando o comando Terraform: ${COMMAND}"
        case ${COMMAND} in
          plan)
            echo "Gerando o plano do Terraform..."
            terraform plan
            ;;
          apply)
            echo "Gerando o plano para aplicação..."
            terraform plan -out=tfplan
            echo "Aplicando as configurações do Terraform..."
            terraform apply -auto-approve tfplan
            ;;
          destroy)
            echo "Destruindo a infraestrutura..."
            terraform destroy -auto-approve
            ;;
          *)
            echo "Comando '${COMMAND}' inválido. Use 'plan', 'apply' ou 'destroy'."
            exit 1
            ;;
        esac

  post_build:
    commands:
      - echo "Build para o comando '${COMMAND}' concluído."
